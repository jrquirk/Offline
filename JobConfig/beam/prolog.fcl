#include "fcl/minimalMessageService.fcl"
#include "fcl/standardProducers.fcl"
#include "fcl/standardServices.fcl"

BEGIN_PROLOG

mu2e.services.simServices: {
   message: @local::default_message
   TFileService: { fileName: @nil }
   RandomNumberGenerator: {defaultEngineKind: "MixMaxRng" }
   GeometryService: { inputFile: "JobConfig/common/geom_baseline.txt" }
   ConditionsService: { conditionsfile: "Mu2eG4/test/conditions_01.txt" }
   GlobalConstantsService: { inputFile: "Mu2eG4/test/globalConstants_01.txt" }
   G4Helper: {}
   SeedService: @local::automaticSeeds
}

// Default seeding of random engines - the seed will be overwritten in grid jobs
mu2e.services.simServices.SeedService.baseSeed:  8
mu2e.services.simServices.SeedService.maxUniqueEngines:  20

// Limit the amount of "Begin processing the ... record" messages
mu2e.services.simServices.message.destinations.log.categories.ArtReport.reportEvery: 1
mu2e.services.simServices.message.destinations.log.categories.ArtReport.limit: 1
mu2e.services.simServices.message.destinations.log.categories.ArtReport.timespan: 300

// We guarantee that our subruns are atomic. The following line is to not run out of memory.
mu2e.services.simServices.scheduler.fileMode: MERGE

#================================================================
mu2e.physics.producers.g4run.flash: {
   module_type: Mu2eG4
   physics: @local::mu2eg4DefaultPhysics
   ResourceLimits: @local::mu2eg4DefaultResourceLimits
   TrajectoryControl: @local::mu2eg4NoTrajectories
   debug:  @local::mu2eg4DefaultDebug
   visualization: @local::mu2eg4NoVisualization

<<<<<<< HEAD
   MultiStageParameters: {
      simParticleNumberOffset: 300000
      genInputHits:  [ "mothersFilter:DetectorMother" ]
      inputSimParticles: "mothersFilter"
      inputMCTrajectories: ""
      inputPhysVolumeMultiInfo: "compressPVMothers"
   }
=======
   generatorModuleLabel: @nil
>>>>>>> master

   SDConfig: {
      enableSD: [ tracker, calorimeter, calorimeterRO, CRV, virtualdetector ]
      preSimulatedHits: ["mothersFilter:virtualdetector"]
      TimeVD: { times: [] }
   }

   Mu2eG4StackingOnlyCut: @local::mu2eg4CutNeutrinos
   Mu2eG4SteppingOnlyCut: {}
   Mu2eG4CommonCut: {}
}


#----------------------------------------------------------------
mu2e.physics.producers.g4run.flash: @local::mu2e.physics.producers.g4run.commonBase
mu2e.physics.producers.g4run.flash.generatorModuleLabel: ""
mu2e.physics.producers.g4run.flash.MultiStageParameters: {
   simParticleNumberOffset: 300000
   genInputHits:  [ "mothersFilter:DetectorMother" ]
   inputSimParticles: "mothersFilter"
   inputMCTrajectories: ""
   inputPhysVolumeMultiInfo: "compressPVMothers"
}
mu2e.physics.producers.g4run.flash.SDConfig.preSimulatedHits:  ["mothersFilter:virtualdetector"]

#----------------------------------------------------------------
mu2e.physics.producers.g4run.muons: @local::mu2e.physics.producers.g4run.commonBase
mu2e.physics.producers.g4run.muons.generatorModuleLabel: "generate"
mu2e.physics.producers.g4run.muons.SDConfig.preSimulatedHits: []

#================================================================
mu2e.producers.compressPVDefs:{
   compressPVDetector: {
      module_type: CompressPhysicalVolumes
      volumesInput: "g4run"
      hitInputs: []
      particleInputs: [ "detectorFilter" ]
   }
   compressPVCRV: {
      module_type: CompressPhysicalVolumes
      volumesInput: "g4run"
      hitInputs: []
      particleInputs: [ "crvFilter" ]
   }
   compressPVFull: {
      module_type: CompressPhysicalVolumes
      volumesInput: "g4run"
      hitInputs: []
      particleInputs: [ "g4run" ]
   }
}

#================================================================
mu2e.filters.g4s4Defs: {
   detectorFilter: {
      module_type: FilterG4Out
      noInstanceName: true
      mainHitInputs: [ "g4run:tracker", "g4run:calorimeter", "g4run:calorimeterRO"]
      extraHitInputs: [ "g4run:virtualdetector" ]
      numSimParticleCollections: 1
      vetoDaughters: []
   }

   crvFilter: {
      module_type: FilterG4Out
      noInstanceName: true
      mainHitInputs: [ "g4run:CRV"]
      extraHitInputs: [ "g4run:virtualdetector" ]
      numSimParticleCollections: 1
      vetoDaughters: []
   }
}

mu2e.filters.g4StatusDefs: {
   g4status: {
      module_type: FilterStatusG4
      input: "g4run"
   }
   g4consistent: {
      module_type: FilterStatusG4
      input: "g4run"
      maxAcceptedStatus: 9  #  status 10 and above means StepPointMCCollection may have non-dereferencable pointers
   }
}

#================================================================
mu2e.outputs.g4s4Defs: {
   detectorOutput: {
      module_type: RootOutput
      SelectEvents: [detPath]
      outputCommands:   [ "drop *_*_*_*",
         "keep mu2e::GenParticles_*_*_*",
         "keep mu2e::GenEventCount_*_*_*",
         "keep mu2e::StatusG4_*_*_*",
         "keep *_detectorFilter_*_*",
         "keep *_compressPVDetector_*_*"
      ]
      fileName: @nil
   }

   crvOutput: {
      module_type: RootOutput
      SelectEvents: [crvPath]
      outputCommands:   [ "drop *_*_*_*",
         "keep mu2e::GenParticles_*_*_*",
         "keep mu2e::GenEventCount_*_*_*",
         "keep mu2e::StatusG4_*_*_*",
         "keep *_crvFilter_*_*",
         "keep *_compressPVCRV_*_*"
      ]
      fileName: @nil
   }

   truncatedEvtsOutput: {
      module_type: RootOutput
      SelectEvents: [g4StatusPath]
      outputCommands:   [ "drop *_*_*_*",
         "keep mu2e::GenParticles_*_*_*",
         "keep mu2e::GenEventCount_*_*_*",
         "keep mu2e::StatusG4_*_*_*",
         "keep *_g4run_*_*",
         "drop uintmu2e::PhysicalVolumeInfomvstd::pairs_*_*_*",
         "keep *_compressPVFull_*_*"
      ]
      fileName: @nil
   }
}

#================================================================
mu2e.physics.g4s4Flash: {
   producers: {
      g4run: @local::mu2e.physics.producers.g4run.flash
      @table::mu2e.producers.compressPVDefs
   }

   filters: {
      detectorFilter: {
	 module_type: FilterG4Out
	 mainHitInputs: [ "g4run:tracker" ]
	 mainSPPtrInputs: [ "CaloShowerStepFromStepPt" ]
	 extraHitInputs: [ "g4run:virtualdetector", "g4run:protonabsorber" ]
	 vetoDaughters: []
      }

      crvFilter: {
	 module_type: FilterG4Out
	 mainHitInputs: [ "g4run:CRV"]
	 extraHitInputs: [ "g4run:virtualdetector" ]
	 vetoDaughters: []
      }

      TrkStepFilter : {
	module_type : MinimumHits
	mode : "trackerOnly"
	MinNStraws : 10
	MinPartMom : 40.0  # MeV/c
	PDGCodes : [11,-11, 13, -13] 
	generatorModuleLabel : "generate"
	g4ModuleLabel : "g4run"
      }

      g4status: {
	 module_type: FilterStatusG4
	 input: "g4run"
      }
      g4consistent: {
	 module_type: FilterStatusG4
	 input: "g4run"
	 maxAcceptedStatus: 9  #  status 10 and above means StepPointMCCollection may have non-dereferencable pointers
      }
   }

   analyzers: { genCountLogger: { module_type: GenEventCountReader } }

   crvPath: [ g4run, g4consistent, crvFilter, compressPVCRV ]
   detPath: [ g4run, g4consistent, detectorFilter, compressPVDetector ]
   g4StatusPath:  [ g4run, "!g4status", compressPVFull ]
   trigger_paths: [ detPath, crvPath, g4StatusPath ]

   out: [ detectorOutput, crvOutput, truncatedEvtsOutput ]
   gcl: [genCountLogger]
   end_paths: [out, gcl]
}

#================================================================
mu2e.physics.g4s4Muons: @local::mu2e.physics.g4s4Flash
mu2e.physics.g4s4Muons.producers.g4run: @local::mu2e.physics.producers.g4run.muons

mu2e.physics.g4s4Muons.producers.generate: {
   module_type: StoppedParticleReactionGun
   verbosityLevel : 1
   physics: @nil
   muonStops : @local::mu2e.tgtMuonStops
}

mu2e.physics.g4s4Muons.producers.genCounter: {
   module_type: GenEventCounter
}

mu2e.physics.g4s4Muons.crvPath: [ generate, genCounter, g4run, g4consistent, crvFilter, compressPVCRV ]
mu2e.physics.g4s4Muons.detPath: [ generate, genCounter, g4run, g4consistent, detectorFilter, compressPVDetector ]
mu2e.physics.g4s4Muons.g4StatusPath:  [ generate, genCounter, g4run, "!g4status", compressPVFull ]

#================================================================

END_PROLOG
